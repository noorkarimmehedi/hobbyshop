{% doc %}
  @prompt
    Create a Shopify custom section for showcasing product videos. The section should allow me to upload and display videos in .webm or .mp4 format. Key requirements:
    
    UI styled like shadcn UI with soft shadows and rounded corners.
    
    Option to display videos either one-by-one or as a carousel with indicators.
    
    Videos must autoplay, loop, and be muted by default (no text overlay).
    
    Option to choose video size (original, fit, or fill).
    
    Fully responsive design, optimized for both desktop and mobile devices.
    
    Clean minimal design, focusing only on the video playback without distractions., Create a Shopify custom section in for showcasing product videos. The section should use Shopifyâ€™s built-in video picker so videos can be uploaded directly from the Shopify admin (not external links).
    
    Key requirements:
    
    Modern, clean UI styled like shadcn UI with soft shadows and rounded corners.
    
    Option to display videos either one-by-one or as a carousel with indicators.
    
    Videos must autoplay, loop, and be muted by default (no text overlay).
    
    Videos should automatically scale and fit properly on both desktop and mobile screens.
    
    Option to choose video size (original, fit, or fill).
    
    Fully responsive design, optimized for mobile and desktop.
    
    Minimal, distraction-free design focusing only on video playback., Liquid error (temp/ai_gen_block_7bf483e line 273): wrong number of arguments (given 3, expected 2)

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-videos-{{ ai_gen_id }} {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
    padding: {{ block.settings.section_padding }}px;
  }

  .ai-product-videos__container-{{ ai_gen_id }} {
    position: relative;
    background: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    overflow: hidden;
  }

  .ai-product-videos__single-video-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.video_height }}px;
    position: relative;
  }

  .ai-product-videos__carousel-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.video_height }}px;
    overflow: hidden;
  }

  .ai-product-videos__carousel-track-{{ ai_gen_id }} {
    display: flex;
    width: 100%;
    height:100%;
    transition: transform 0.3s ease-in-out;
  }

  .ai-product-videos__video-slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    width: 100%;
    height: 100%;
    position: relative;
  }

  .ai-product-videos__video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    border: none;
    outline: none;}

  .ai-product-videos__video-{{ ai_gen_id }}--original {
    object-fit: none;
    object-position: center;
  }

  .ai-product-videos__video-{{ ai_gen_id }}--fit {
    object-fit: contain;
  }

  .ai-product-videos__video-{{ ai_gen_id }}--fill {
    object-fit: cover;
  }

  .ai-product-videos__placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-product-videos__placeholder-{{ ai_gen_id }} svg {
    width: 64px;
    height: 64px;
    color: #9ca3af;
  }

  .ai-product-videos__empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(255, 255, 255, 0.9);
    padding: 8px 16px;
    border-radius: 6px;
    font-size: 14px;
    color: #6b7280;
    text-align: center;
    backdrop-filter: blur(4px);
  }

  .ai-product-videos__indicators-{{ ai_gen_id }} {
    position: absolute;
    bottom: 16px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    z-index: 10;
  }

  .ai-product-videos__indicator-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    padding: 0;
  }

  .ai-product-videos__indicator-{{ ai_gen_id }}.active {
    background: rgba(255, 255, 255, 0.9);
    transform: scale(1.2);
  }

  .ai-product-videos__nav-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    z-index: 10;
    backdrop-filter: blur(4px);box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .ai-product-videos__nav-button-{{ ai_gen_id }}:hover {
    background: rgba(255, 255, 255, 1);
    transform: translateY(-50%) scale(1.05);
  }

  .ai-product-videos__nav-button-{{ ai_gen_id }}--prev {
    left: 16px;
  }

  .ai-product-videos__nav-button-{{ ai_gen_id }}--next {
    right: 16px;
  }

  .ai-product-videos__nav-button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    color: #374151;
  }

  @media screen and (max-width: 768px) {
    .ai-product-videos-{{ ai_gen_id }} {
      padding: {{ block.settings.section_padding | times: 0.7 }}px;
    }

    .ai-product-videos__single-video-{{ ai_gen_id }},
    .ai-product-videos__carousel-{{ ai_gen_id }} {
      height: {{ block.settings.video_height | times: 0.7 }}px;
    }

    .ai-product-videos__nav-button-{{ ai_gen_id }} {
      width: 32px;
      height: 32px;
    }

    .ai-product-videos__nav-button-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }

    .ai-product-videos__nav-button-{{ ai_gen_id }}--prev {
      left: 12px;
    }

    .ai-product-videos__nav-button-{{ ai_gen_id }}--next {
      right: 12px;
    }

    .ai-product-videos__indicators-{{ ai_gen_id }} {
      bottom: 12px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-product-videos__single-video-{{ ai_gen_id }},
    .ai-product-videos__carousel-{{ ai_gen_id }} {
      height: {{ block.settings.video_height | times: 0.5 }}px;
    }
  }
{% endstyle %}<product-videos-{{ ai_gen_id }}
  class="ai-product-videos-{{ ai_gen_id }}"
  data-display-mode="{{ block.settings.display_mode }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-videos__container-{{ ai_gen_id }}">
    {% assign has_videos = false %}
    {% for i in (1..5) %}
      {% assign video_key = 'video_' | append: i %}
      {% if block.settings[video_key] != blank %}
        {% assign has_videos = true %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% if has_videos %}
      {% if block.settings.display_mode == 'single' %}
        {% for i in (1..5) %}
          {% assign video_key = 'video_' | append: i %}
          {% if block.settings[video_key] != blank %}
            <div class="ai-product-videos__single-video-{{ ai_gen_id }}">
              {% assign video_class = 'ai-product-videos__video-' | append: ai_gen_id | append: ' ai-product-videos__video-' | append: ai_gen_id | append: '--' | append: block.settings.video_size %}
              {{ block.settings[video_key] | video_tag: 
                class: video_class,
                autoplay: true,
                loop: true,
                muted: true,
                controls: false,
                playsinline: true
              }}
            </div>
            {% break %}
          {% endif %}
        {% endfor %}
      {% else %}
        <div class="ai-product-videos__carousel-{{ ai_gen_id }}">
          <div class="ai-product-videos__carousel-track-{{ ai_gen_id }}">
            {% assign video_count = 0 %}
            {% for i in (1..5) %}
              {% assign video_key = 'video_' | append: i %}
              {% if block.settings[video_key] != blank %}
                {% assign video_count = video_count | plus: 1 %}
                <div class="ai-product-videos__video-slide-{{ ai_gen_id }}">
                  {% assign video_class = 'ai-product-videos__video-' | append: ai_gen_id | append: ' ai-product-videos__video-' | append: ai_gen_id | append: '--' | append: block.settings.video_size %}
                  {{ block.settings[video_key] | video_tag: 
                    class: video_class,
                    autoplay: true,
                    loop: true,
                    muted: true,
                    controls: false,
                    playsinline: true
                  }}
                </div>
              {% endif %}
            {% endfor %}
          </div>

          {% if video_count > 1 %}
            <button
              class="ai-product-videos__nav-button-{{ ai_gen_id }} ai-product-videos__nav-button-{{ ai_gen_id }}--prev"
              aria-label="Previous video"
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
            </button>

            <button
              class="ai-product-videos__nav-button-{{ ai_gen_id }} ai-product-videos__nav-button-{{ ai_gen_id }}--next"
              aria-label="Next video"
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </button>

            <div class="ai-product-videos__indicators-{{ ai_gen_id }}">
              {% for i in (1..video_count) %}
                <button
                  class="ai-product-videos__indicator-{{ ai_gen_id }}{% if forloop.first %} active{% endif %}"
                  data-slide="{{ forloop.index0 }}"
                  aria-label="Go to video {{ forloop.index }}"
                ></button>
              {% endfor %}
            </div>
          {% endif %}
        </div>
      {% endif %}
    {% else %}
      <div class="ai-product-videos__placeholder-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg><div class="ai-product-videos__empty-state-{{ ai_gen_id }}">
          Upload videos to get started
        </div>
      </div>
    {% endif %}
  </div>
</product-videos-{{ ai_gen_id }}><script>
  (function() {
    class ProductVideos{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.totalSlides = 0;
      }

      connectedCallback() {
        this.displayMode = this.dataset.displayMode;
        if (this.displayMode === 'carousel') {
          this.initCarousel();
        }this.initVideoPlayback();
      }

      initCarousel() {
        this.track = this.querySelector('.ai-product-videos__carousel-track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-product-videos__video-slide-{{ ai_gen_id }}');
        this.indicators = this.querySelectorAll('.ai-product-videos__indicator-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-product-videos__nav-button-{{ ai_gen_id }}--prev');
        this.nextButton = this.querySelector('.ai-product-videos__nav-button-{{ ai_gen_id }}--next');
        this.totalSlides = this.slides.length;
        
        if (this.totalSlides <= 1) return;

        this.prevButton?.addEventListener('click', () => this.prevSlide());
        this.nextButton?.addEventListener('click', () => this.nextSlide());
        
        this.indicators.forEach((indicator, index) => {
          indicator.addEventListener('click', () => this.goToSlide(index));
        });

        this.updateCarousel();
      }

      initVideoPlayback() {
        const videos = this.querySelectorAll('.ai-product-videos__video-{{ ai_gen_id }}');
        
        videos.forEach((video, index) => {
          video.addEventListener('loadedmetadata', () => {
            if (this.displayMode === 'single' || index === this.currentSlide) {
              video.play().catch(() => {});
            }
          });

          video.addEventListener('click', (e) => {
            e.preventDefault();
            if (video.paused) {
              video.play().catch(() => {});
            } else {
              video.pause();
            }
          });
        });
      }

      prevSlide() {
        this.currentSlide = this.currentSlide === 0 ? this.totalSlides - 1 : this.currentSlide - 1;
        this.updateCarousel();
      }

      nextSlide() {
        this.currentSlide = this.currentSlide === this.totalSlides - 1 ? 0 : this.currentSlide + 1;
        this.updateCarousel();
      }

      goToSlide(index) {
        this.currentSlide = index;
        this.updateCarousel();
      }

      updateCarousel() {
        if (!this.track) return;

        const translateX = -this.currentSlide * 100;
        this.track.style.transform = `translateX(${translateX}%)`;

        this.indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === this.currentSlide);
        });

        const videos = this.querySelectorAll('.ai-product-videos__video-{{ ai_gen_id }}');
        videos.forEach((video, index) => {
          if (index === this.currentSlide) {
            video.play().catch(() => {});
          } else {
            video.pause();
          }
        });
      }
    }

    customElements.define('product-videos-{{ ai_gen_id }}', ProductVideos{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product videos",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Display settings"
    },
    {
      "type": "select",
      "id": "display_mode",
      "label": "Display mode",
      "options": [
        {
          "value": "single",
          "label": "Single video"
        },
        {
          "value": "carousel",
          "label": "Carousel"
        }
      ],
      "default": "carousel"
    },
    {
      "type": "select",
      "id": "video_size",
      "label": "Video size",
      "options": [
        {
          "value": "original",
          "label": "Original"
        },
        {
          "value": "fit",
          "label": "Fit"
        },
        {
          "value": "fill",
          "label": "Fill"
        }
      ],
      "default": "fill"
    },
    {
      "type": "range",
      "id": "video_height",
      "min": 200,
      "max": 800,
      "step": 20,
      "unit": "px",
      "label": "Video height",
      "default": 400
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 20
    },
    {
      "type": "header",
      "content": "Videos"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Video 1"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Video 2"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Video 3"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Video 4"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Video 5"
    }
  ],
  "presets": [
    {
      "name": "Product videos"
    }
  ]
}
{% endschema %}