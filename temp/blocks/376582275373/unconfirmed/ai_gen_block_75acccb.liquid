{% doc %}
  @prompt
    build a reels video section for me to showcase reels videos , video isn;t adding getting errior. it thec section should be sliders 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-reels-slider-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding_top }}px 0 {{ block.settings.section_padding_bottom }}px;
    background-color: {{ block.settings.background_color }};
    overflow: hidden;
  }

  .ai-reels-container-{{ ai_gen_id }} {
    max-width: {{ block.settings.container_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-reels-header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: 40px;
  }

  .ai-reels-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0 0 12px;
  }

  .ai-reels-subtitle-{{ ai_gen_id }} {
    font-size: {{ block.settings.subtitle_size }}px;
    color: {{ block.settings.subtitle_color }};
    margin: 0;
  }

  .ai-reels-slider-wrapper-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-reels-track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.slide_gap }}px;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    scrollbar-width: none;
    -webkit-overflow-scrolling: touch;
    padding-bottom: 20px;
  }

  .ai-reels-track-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-reel-slide-{{ ai_gen_id }} {
    flex: 0 0 {{ block.settings.slide_width }}px;
    scroll-snap-align: start;
    position: relative;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    background-color: {{ block.settings.video_background }};
    aspect-ratio: 9 / 16;
  }

  .ai-reel-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .ai-reel-video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-reel-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
    position: relative;
  }

  .ai-reel-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-reel-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 16px;
    font-size: 12px;
    color: #666;
    text-align: center;
    pointer-events: none;
    width: 80%;
  }

  .ai-reel-overlay-{{ ai_gen_id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 20px;
    background: linear-gradient(to top, rgba(0, 0, 0, {{ block.settings.overlay_opacity }}), transparent);
    color: {{ block.settings.overlay_text_color }};
  }

  .ai-reel-caption-{{ ai_gen_id }} {
    font-size: 16px;
    margin: 0 0 8px;
    font-weight: 600;
  }

  .ai-reel-description-{{ ai_gen_id }} {
    font-size: 14px;
    margin: 0;
    opacity: 0.9;
  }

  .ai-reel-play-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 70px;
    height: 70px;
    background-color: {{ block.settings.play_button_color }};
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease, opacity 0.3s ease;
    opacity: {{ block.settings.play_button_opacity }};
    z-index: 2;
  }

  .ai-reel-play-button-{{ ai_gen_id }}:hover {
    transform: translate(-50%, -50%) scale(1.1);
    opacity: 1;
  }

  .ai-reel-play-button-{{ ai_gen_id }} svg {
    width: 28px;
    height: 28px;
    fill: {{ block.settings.play_button_icon_color }};
    margin-left: 4px;
  }

  .ai-slider-nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 12px;
    margin-top: 30px;
  }

  .ai-slider-nav-button-{{ ai_gen_id }} {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: {{ block.settings.nav_button_color }};
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease, opacity 0.2s ease;
  }

  .ai-slider-nav-button-{{ ai_gen_id }}:hover {
    transform: scale(1.1);
  }

  .ai-slider-nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .ai-slider-nav-button-{{ ai_gen_id }}:disabled:hover {
    transform: scale(1);
  }

  .ai-slider-nav-button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    fill: {{ block.settings.nav_icon_color }};
  }

  .ai-slider-dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 20px;
  }

  .ai-slider-dot-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.3;
    transition: opacity 0.3s ease, transform 0.3s ease;
    cursor: pointer;
  }

  .ai-slider-dot-{{ ai_gen_id }}.active {
    opacity: 1;
    transform: scale(1.3);
  }

  @media screen and (max-width: 989px) {
    .ai-reel-slide-{{ ai_gen_id }} {
      flex: 0 0 {{ block.settings.slide_width_tablet }}px;
    }

    .ai-reels-title-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.title_size }}px * 0.8);
    }

    .ai-reels-subtitle-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.subtitle_size }}px * 0.9);
    }
  }

  @media screen and (max-width: 749px) {
    .ai-reel-slide-{{ ai_gen_id }} {
      flex: 0 0 {{ block.settings.slide_width_mobile }}px;
    }

    .ai-reels-slider-{{ ai_gen_id }} {
      padding: {{ block.settings.section_padding_top | times: 0.6 }}px 0 {{ block.settings.section_padding_bottom | times: 0.6 }}px;
    }

    .ai-reels-title-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.title_size }}px * 0.7);
    }

    .ai-reels-subtitle-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.subtitle_size }}px * 0.85);
    }

    .ai-reel-play-button-{{ ai_gen_id }} {
      width: 60px;
      height: 60px;
    }

    .ai-reel-play-button-{{ ai_gen_id }} svg {
      width: 24px;
      height: 24px;
    }
  }
{% endstyle %}

<reels-slider-{{ ai_gen_id }} class="ai-reels-slider-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-reels-container-{{ ai_gen_id }}">
    {% if block.settings.title != blank or block.settings.subtitle != blank %}
      <div class="ai-reels-header-{{ ai_gen_id }}">
        {% if block.settings.title != blank %}
          <h2 class="ai-reels-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
        {% endif %}
        {% if block.settings.subtitle != blank %}
          <div class="ai-reels-subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</div>
        {% endif %}
      </div>
    {% endif %}

    <div class="ai-reels-slider-wrapper-{{ ai_gen_id }}">
      <div class="ai-reels-track-{{ ai_gen_id }}" data-slider-track>
        {% for i in (1..8) %}
          {% liquid
            assign url_key = 'video_url_' | append: i
            assign caption_key = 'caption_' | append: i
            assign description_key = 'description_' | append: i

            assign video_url = block.settings[url_key]
            assign caption = block.settings[caption_key]
            assign description = block.settings[description_key]
          %}

          <div class="ai-reel-slide-{{ ai_gen_id }}" data-slide>
            <div class="ai-reel-video-wrapper-{{ ai_gen_id }}">
              {% if video_url != blank %}
                <video
                  class="ai-reel-video-{{ ai_gen_id }}"
                  playsinline
                  muted
                  loop
                  preload="metadata"
                  data-reel-video
                >
                  <source src="{{ video_url }}" type="video/mp4">
                </video>

                {% if block.settings.show_play_button %}
                  <button
                    class="ai-reel-play-button-{{ ai_gen_id }}"
                    aria-label="Play video"
                    data-play-button
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </button>
                {% endif %}

                {% if caption != blank or description != blank %}
                  <div class="ai-reel-overlay-{{ ai_gen_id }}">
                    {% if caption != blank %}
                      <p class="ai-reel-caption-{{ ai_gen_id }}">{{ caption }}</p>
                    {% endif %}
                    {% if description != blank %}
                      <p class="ai-reel-description-{{ ai_gen_id }}">{{ description }}</p>
                    {% endif %}
                  </div>
                {% endif %}
              {% else %}
                <div class="ai-reel-placeholder-{{ ai_gen_id }}">
                  {{ 'image' | placeholder_svg_tag }}
                  <div class="ai-reel-empty-state-{{ ai_gen_id }}">
                    Add video URL {{ i }}
                  </div>
                </div>
              {% endif %}
            </div>
          </div>
        {% endfor %}
      </div>

      {% if block.settings.show_navigation %}
        <div class="ai-slider-nav-{{ ai_gen_id }}">
          <button
            class="ai-slider-nav-button-{{ ai_gen_id }}"
            data-prev-button
            aria-label="Previous slide"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M15 18l-6-6 6-6"/>
            </svg>
          </button>
          <button
            class="ai-slider-nav-button-{{ ai_gen_id }}"
            data-next-button
            aria-label="Next slide"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M9 18l6-6-6-6"/>
            </svg>
          </button>
        </div>
      {% endif %}

      {% if block.settings.show_dots %}
        <div class="ai-slider-dots-{{ ai_gen_id }}" data-dots></div>
      {% endif %}
    </div>
  </div>
</reels-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class ReelsSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.track = this.querySelector('[data-slider-track]');
        this.slides = this.querySelectorAll('[data-slide]');
        this.videos = this.querySelectorAll('[data-reel-video]');
        this.playButtons = this.querySelectorAll('[data-play-button]');
        this.prevButton = this.querySelector('[data-prev-button]');
        this.nextButton = this.querySelector('[data-next-button]');
        this.dotsContainer = this.querySelector('[data-dots]');
        
        this.currentIndex = 0;
        this.visibleSlides = this.getVisibleSlides();

        this.setupVideoControls();
        this.setupNavigation();
        this.setupDots();
        this.setupIntersectionObserver();
        this.updateNavButtons();

        window.addEventListener('resize', () => {
          this.visibleSlides = this.getVisibleSlides();
          this.updateDots();
          this.updateNavButtons();
        });
      }

      getVisibleSlides() {
        const width = window.innerWidth;
        if (width <= 749) return 1;
        if (width <= 989) return 2;
        return 3;
      }

      setupVideoControls() {
        this.playButtons.forEach((button, index) => {
          const video = this.videos[index];
          if (!video) return;

          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.toggleVideo(video, button);
          });

          video.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.toggleVideo(video, button);
          });
        });
      }

      toggleVideo(video, button) {
        if (video.paused) {
          this.pauseAllVideos();
          video.play();
          button.style.opacity = '0';
        } else {
          video.pause();
          button.style.opacity = '{{ block.settings.play_button_opacity }}';
        }
      }

      pauseAllVideos() {
        this.videos.forEach((video, index) => {
          video.pause();
          if (this.playButtons[index]) {
            this.playButtons[index].style.opacity = '{{ block.settings.play_button_opacity }}';
          }
        });
      }

      setupNavigation() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prev());
        }
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.next());
        }

        this.track.addEventListener('scroll', () => {
          this.updateCurrentIndex();
          this.updateNavButtons();
          this.updateDots();
        });
      }

      setupDots() {
        if (!this.dotsContainer) return;

        const totalDots = Math.ceil(this.slides.length / this.visibleSlides);
        this.dotsContainer.innerHTML = '';

        for (let i = 0; i < totalDots; i++) {
          const dot = document.createElement('button');
          dot.className = 'ai-slider-dot-{{ ai_gen_id }}';
          dot.setAttribute('aria-label', 'Go to slide ' + (i + 1));
          if (i === 0) dot.classList.add('active');
          
          dot.addEventListener('click', () => {
            this.goToSlide(i * this.visibleSlides);
          });
          
          this.dotsContainer.appendChild(dot);
        }
      }

      updateDots() {
        if (!this.dotsContainer) return;

        const dots = this.dotsContainer.querySelectorAll('.ai-slider-dot-{{ ai_gen_id }}');
        const activeDotIndex = Math.floor(this.currentIndex / this.visibleSlides);

        dots.forEach((dot, index) => {
          if (index === activeDotIndex) {
            dot.classList.add('active');
          } else {
            dot.classList.remove('active');
          }
        });
      }

      updateCurrentIndex() {
        const scrollLeft = this.track.scrollLeft;
        const slideWidth = this.slides[0].offsetWidth;
        const gap = {{ block.settings.slide_gap }};
        this.currentIndex = Math.round(scrollLeft / (slideWidth + gap));
      }

      updateNavButtons() {
        if (!this.prevButton || !this.nextButton) return;

        this.prevButton.disabled = this.currentIndex === 0;
        this.nextButton.disabled = this.currentIndex >= this.slides.length - this.visibleSlides;
      }

      prev() {
        if (this.currentIndex > 0) {
          this.goToSlide(this.currentIndex - 1);
        }
      }

      next() {
        if (this.currentIndex < this.slides.length - this.visibleSlides) {
          this.goToSlide(this.currentIndex + 1);
        }
      }

      goToSlide(index) {
        const slideWidth = this.slides[0].offsetWidth;
        const gap = {{ block.settings.slide_gap }};
        this.track.scrollLeft = index * (slideWidth + gap);
        this.currentIndex = index;
        this.updateNavButtons();
        this.updateDots();
      }

      setupIntersectionObserver() {
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0.5
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            const video = entry.target;
            if (!entry.isIntersecting && !video.paused) {
              video.pause();
              const index = Array.from(this.videos).indexOf(video);
              if (this.playButtons[index]) {
                this.playButtons[index].style.opacity = '{{ block.settings.play_button_opacity }}';
              }
            }
          });
        }, options);

        this.videos.forEach((video) => {
          observer.observe(video);
        });
      }
    }

    customElements.define('reels-slider-{{ ai_gen_id }}', ReelsSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Reels slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Section header"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "label": "Title",
      "default": "Watch Our Reels"
    },
    {
      "type": "inline_richtext",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Swipe to discover our latest video content"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 40
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#1a1a1a"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle color",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "container_width",
      "min": 1000,
      "max": 1600,
      "step": 100,
      "unit": "px",
      "label": "Container width",
      "default": 1400
    },
    {
      "type": "range",
      "id": "slide_width",
      "min": 200,
      "max": 500,
      "step": 10,
      "unit": "px",
      "label": "Slide width on desktop",
      "default": 300
    },
    {
      "type": "range",
      "id": "slide_width_tablet",
      "min": 200,
      "max": 400,
      "step": 10,
      "unit": "px",
      "label": "Slide width on tablet",
      "default": 280
    },
    {
      "type": "range",
      "id": "slide_width_mobile",
      "min": 150,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Slide width on mobile",
      "default": 250
    },
    {
      "type": "range",
      "id": "slide_gap",
      "min": 10,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Gap between slides",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Top padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom padding",
      "default": 60
    },
    {
      "type": "header",
      "content": "Video style"
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Border radius",
      "default": 16
    },
    {
      "type": "color",
      "id": "video_background",
      "label": "Video background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Section background",
      "default": "#f0f0f0"
    },
    {
      "type": "header",
      "content": "Play button"
    },
    {
      "type": "checkbox",
      "id": "show_play_button",
      "label": "Show play button",
      "default": true
    },
    {
      "type": "color",
      "id": "play_button_color",
      "label": "Button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "play_button_icon_color",
      "label": "Icon color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "play_button_opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Button opacity",
      "default": 0.9
    },
    {
      "type": "header",
      "content": "Overlay"
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Overlay opacity",
      "default": 0.7
    },
    {
      "type": "color",
      "id": "overlay_text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#1a1a1a"
    },
    {
      "type": "color",
      "id": "nav_icon_color",
      "label": "Navigation icon color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#1a1a1a"
    },
    {
      "type": "header",
      "content": "Video 1"
    },
    {
      "type": "url",
      "id": "video_url_1",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_1",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_1",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 2"
    },
    {
      "type": "url",
      "id": "video_url_2",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_2",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_2",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 3"
    },
    {
      "type": "url",
      "id": "video_url_3",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_3",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_3",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 4"
    },
    {
      "type": "url",
      "id": "video_url_4",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_4",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_4",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 5"
    },
    {
      "type": "url",
      "id": "video_url_5",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_5",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_5",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 6"
    },
    {
      "type": "url",
      "id": "video_url_6",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_6",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_6",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 7"
    },
    {
      "type": "url",
      "id": "video_url_7",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_7",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_7",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Video 8"
    },
    {
      "type": "url",
      "id": "video_url_8",
      "label": "Video URL"
    },
    {
      "type": "text",
      "id": "caption_8",
      "label": "Caption"
    },
    {
      "type": "text",
      "id": "description_8",
      "label": "Description"
    }
  ],
  "presets": [
    {
      "name": "Reels slider"
    }
  ]
}
{% endschema %}
